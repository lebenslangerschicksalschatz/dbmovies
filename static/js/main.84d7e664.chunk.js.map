{"version":3,"sources":["components/SearchArea.js","components/Movies/MovieCard.js","components/Movies/MovieList.js","components/Movies/Pagination.js","components/Movies/Movies.js","components/Watchlist/Watchlist.js","components/AlreadySeen/AlreadySeen.js","components/Top250/Top250.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchArea","props","className","action","onSubmit","handleSubmit","onChange","handleChange","type","placeholder","MovieCard","image","src","alt","MovieList","movies","map","movie","i","key","poster_path","Pagination","pageLinks","activePage","currentPage","push","onClick","nextPage","pages","Movies","event","preventDefault","fetch","apiKey","state","searchTerm","then","data","json","console","log","setState","results","totalPages","total_pages","totalResults","total_results","target","value","pageNumber","numberPages","this","React","Component","Watchlist","AlreadySeen","Top250","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84d7e664.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchArea = (props) => {\r\n    return (\r\n        <div className=\"search-box\">\r\n            <form action=\"\" onSubmit={props.handleSubmit}>\r\n                <input \r\n                    onChange={props.handleChange}\r\n                    type=\"text\"\r\n                    placeholder=\"What are you looking for?\"\r\n                />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchArea;","import React from 'react';\r\n\r\nconst MovieCard = (props) => {\r\n    return (\r\n        <div className=\"movie-list__item\">\r\n            {\r\n                props.image == null \r\n                ? <img src={`https://motivatevalmorgan.com/wp-content/uploads/2016/06/default-movie-300x450.jpg`} alt=\"Movie Poster\" /> \r\n                : <img src={`http://image.tmdb.org/t/p/w185${props.image}`} alt=\"Movie Poster\" />\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MovieCard","import React from 'react';\r\nimport MovieCard from './MovieCard'\r\n\r\nconst MovieList = (props) => {\r\n\r\n    return (\r\n        <div className=\"movie-list\">\r\n            {\r\n                props.movies.map((movie, i) => {\r\n                    return (\r\n                        <MovieCard key={i} image={movie.poster_path} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieList","import React from 'react';\r\n\r\nconst Pagination = (props) => {\r\n    const pageLinks = [];\r\n\r\n    for(let i = 1; i <= props.pages; i++) {\r\n        let activePage = props.currentPage === i ? 'activePage' : '';\r\n\r\n        pageLinks.push(\r\n            <li \r\n                className={`pages__number ${activePage}`} \r\n                key={i} \r\n                onClick={() => props.nextPage(i)}\r\n            >\r\n                <button>{i}</button>\r\n            </li>)\r\n    }\r\n\r\n    return (\r\n        <ul className=\"pages\">\r\n            { \r\n                props.currentPage > 1 \r\n                ? <li className={`pages__number`} onClick={() => props.nextPage(props.currentPage - 1)}>\r\n                    <button>Prev</button>\r\n                </li>\r\n                : \"\"\r\n            }\r\n            { pageLinks }\r\n            { \r\n                props.currentPage < props.pages \r\n                ? <li className={`pages__number`} onClick={() => props.nextPage(props.currentPage + 1)}>\r\n                    <button>Next</button>\r\n                </li>\r\n                : \"\"\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Pagination","import React from \"react\";\nimport SearchArea from \"../SearchArea\"\nimport MovieList from \"./MovieList\"\nimport Pagination from \"./Pagination\"\n \nclass Movies extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      movies: [],\n      searchTerm: \"\",\n      totalPages: 0,\n      totalResults: 0,\n      currentPage: 1\n    }\n    this.apiKey = '090028bc6de357f7dbfd5aeebae43718'\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${this.state.searchTerm}`)\n    .then(data => data.json())\n    .then(data => {\n      console.log(data);\n      this.setState({movies: [...data.results], totalPages: data.total_pages, totalResults: data.total_results})\n    })\n\n  }\n\n  handleChange = (event) => {\n    this.setState({searchTerm: event.target.value})\n  }\n\n  nextPage = (pageNumber) => {\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${this.state.searchTerm}&page=${pageNumber}`)\n    .then(data => data.json())\n    .then(data => {\n      console.log(data);\n      this.setState({movies: [...data.results], currentPage: pageNumber})\n    })\n  } \n\n  render() {\n\n    const numberPages = this.state.totalPages;\n\n    return (\n      <div className=\"movies\">\n        <SearchArea \n          handleSubmit={this.handleSubmit}\n          handleChange={this.handleChange}\n        />\n        <MovieList movies={this.state.movies} />\n        {\n          this.state.totalResults > 10 \n          ? <Pagination pages={numberPages} nextPage={this.nextPage} currentPage={this.state.currentPage} />\n          : \"\"\n        }\n      </div>\n    );\n  }\n}\n \nexport default Movies;","import React from \"react\";\n \nclass Watchlist extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2>WATCHLIST</h2>\n        <p>Cras facilisis urna ornare ex volutpat, et\n        convallis erat elementum. Ut aliquam, ipsum vitae\n        gravida suscipit, metus dui bibendum est, eget rhoncus nibh\n        metus nec massa. Maecenas hendrerit laoreet augue\n        nec molestie. Cum sociis natoque penatibus et magnis\n        dis parturient montes, nascetur ridiculus mus.</p>\n      </div>\n    );\n  }\n}\n \nexport default Watchlist;","import React from \"react\";\n \nclass AlreadySeen extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2>ALREADY SEEN</h2>\n        <p>Cras facilisis urna ornare ex volutpat, et\n        convallis erat elementum. Ut aliquam, ipsum vitae\n        gravida suscipit, metus dui bibendum est, eget rhoncus nibh\n        metus nec massa. Maecenas hendrerit laoreet augue\n        nec molestie. Cum sociis natoque penatibus et magnis\n        dis parturient montes, nascetur ridiculus mus.</p>\n      </div>\n    );\n  }\n}\n \nexport default AlreadySeen;","import React from \"react\";\n \nclass Top250 extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2>TOP 250</h2>\n        <p>Cras facilisis urna ornare ex volutpat, et\n        convallis erat elementum. Ut aliquam, ipsum vitae\n        gravida suscipit, metus dui bibendum est, eget rhoncus nibh\n        metus nec massa. Maecenas hendrerit laoreet augue\n        nec molestie. Cum sociis natoque penatibus et magnis\n        dis parturient montes, nascetur ridiculus mus.</p>\n      </div>\n    );\n  }\n}\n \nexport default Top250;","import React, { Component } from 'react';\nimport '../scss/App.scss';\nimport {\n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\nimport Movies from \"./Movies/Movies\";\nimport Watchlist from \"./Watchlist/Watchlist\";\nimport AlreadySeen from \"./AlreadySeen/AlreadySeen\";\nimport Top250 from \"./Top250/Top250\";\n\nclass App extends Component {\n  render () {\n    return (\n      <>\n        <HashRouter>\n          <header className=\"header\">\n              <div className=\"wrapper\">\n                  <div className=\"header__logo\"><NavLink to=\"/Movies\"><img src=\"./main_logo.png\" alt=\"Main Logo\"/></NavLink></div>\n                  <nav className=\"nav\">\n                      <ul className=\"nav__list\">\n                          <li className=\"nav__item\"><NavLink to=\"/Movies\">Home</NavLink></li>\n                          <li className=\"nav__item\"><NavLink to=\"/Watchlist\">Watchlist</NavLink></li>\n                          <li className=\"nav__item\"><NavLink to=\"/AlreadySeen\">Already Seen</NavLink></li>\n                          <li className=\"nav__item\"><NavLink to=\"/Top250\">Top250</NavLink></li>\n                      </ul>\n                  </nav>\n              </div>\n          </header>\n          <main className=\"main\">\n            <div className=\"wrapper\">\n                <Route exact path=\"/Movies\" component={Movies}/>\n                <Route path=\"/Watchlist\" component={Watchlist}/>\n                <Route path=\"/AlreadySeen\" component={AlreadySeen}/>\n                <Route path=\"/Top250\" component={Top250}/>\n            </div>\n          </main>\n        </HashRouter>\n      </>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}